// Code generated by MockGen. DO NOT EDIT.
// Source: ./chat/pkg/storage/db.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// DeleteFile mocks base method.
func (m *MockDB) DeleteFile(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockDBMockRecorder) DeleteFile(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockDB)(nil).DeleteFile), id)
}

// GetFilePath mocks base method.
func (m *MockDB) GetFilePath(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilePath", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilePath indicates an expected call of GetFilePath.
func (mr *MockDBMockRecorder) GetFilePath(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilePath", reflect.TypeOf((*MockDB)(nil).GetFilePath), id)
}

// IsExist mocks base method.
func (m *MockDB) IsExist(name, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", name, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockDBMockRecorder) IsExist(name, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockDB)(nil).IsExist), name, path)
}

// SaveFilePath mocks base method.
func (m *MockDB) SaveFilePath(name, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilePath", name, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFilePath indicates an expected call of SaveFilePath.
func (mr *MockDBMockRecorder) SaveFilePath(name, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilePath", reflect.TypeOf((*MockDB)(nil).SaveFilePath), name, path)
}
