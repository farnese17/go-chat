// Code generated by MockGen. DO NOT EDIT.
// Source: ./chat/pkg/storage/db.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	storage "github.com/farnese17/chat/pkg/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// CreateReference mocks base method.
func (m *MockDB) CreateReference(f *storage.FileReference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReference", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReference indicates an expected call of CreateReference.
func (mr *MockDBMockRecorder) CreateReference(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReference", reflect.TypeOf((*MockDB)(nil).CreateReference), f)
}

// Delete mocks base method.
func (m *MockDB) Delete(uid uint, fileID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", uid, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDBMockRecorder) Delete(uid, fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDB)(nil).Delete), uid, fileID)
}

// FindFileByHash mocks base method.
func (m *MockDB) FindFileByHash(uploader uint, hash string) (uint, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFileByHash", uploader, hash)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindFileByHash indicates an expected call of FindFileByHash.
func (mr *MockDBMockRecorder) FindFileByHash(uploader, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFileByHash", reflect.TypeOf((*MockDB)(nil).FindFileByHash), uploader, hash)
}

// Get mocks base method.
func (m *MockDB) Get(id string) (*storage.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*storage.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDBMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDB)(nil).Get), id)
}

// SaveFile mocks base method.
func (m *MockDB) SaveFile(f *storage.File) (*storage.FileReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", f)
	ret0, _ := ret[0].(*storage.FileReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockDBMockRecorder) SaveFile(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockDB)(nil).SaveFile), f)
}
