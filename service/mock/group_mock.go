// Code generated by MockGen. DO NOT EDIT.
// Source: ./chat/repository/group.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/farnese17/chat/service/model"
	gomock "github.com/golang/mock/gomock"
)

// MockGroupRepository is a mock of GroupRepository interface.
type MockGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepositoryMockRecorder
}

// MockGroupRepositoryMockRecorder is the mock recorder for MockGroupRepository.
type MockGroupRepositoryMockRecorder struct {
	mock *MockGroupRepository
}

// NewMockGroupRepository creates a new mock instance.
func NewMockGroupRepository(ctrl *gomock.Controller) *MockGroupRepository {
	mock := &MockGroupRepository{ctrl: ctrl}
	mock.recorder = &MockGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepository) EXPECT() *MockGroupRepositoryMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockGroupRepository) Apply(gid, inviteID, targetID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", gid, inviteID, targetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockGroupRepositoryMockRecorder) Apply(gid, inviteID, targetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockGroupRepository)(nil).Apply), gid, inviteID, targetID)
}

// Create mocks base method.
func (m *MockGroupRepository) Create(group *model.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", group)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGroupRepositoryMockRecorder) Create(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupRepository)(nil).Create), group)
}

// CreateMember mocks base method.
func (m *MockGroupRepository) CreateMember(ctx *model.MemberStatusContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockGroupRepositoryMockRecorder) CreateMember(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockGroupRepository)(nil).CreateMember), ctx)
}

// Delete mocks base method.
func (m *MockGroupRepository) Delete(gid, uid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", gid, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupRepositoryMockRecorder) Delete(gid, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupRepository)(nil).Delete), gid, uid)
}

// DeleteAnnounce mocks base method.
func (m *MockGroupRepository) DeleteAnnounce(gid, uid, announceID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnnounce", gid, uid, announceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnnounce indicates an expected call of DeleteAnnounce.
func (mr *MockGroupRepositoryMockRecorder) DeleteAnnounce(gid, uid, announceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnounce", reflect.TypeOf((*MockGroupRepository)(nil).DeleteAnnounce), gid, uid, announceID)
}

// DeleteMember mocks base method.
func (m *MockGroupRepository) DeleteMember(ctx *model.MemberStatusContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockGroupRepositoryMockRecorder) DeleteMember(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockGroupRepository)(nil).DeleteMember), ctx)
}

// GetMembersID mocks base method.
func (m *MockGroupRepository) GetMembersID(gid uint) ([]*model.GroupMemberRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersID", gid)
	ret0, _ := ret[0].([]*model.GroupMemberRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersID indicates an expected call of GetMembersID.
func (mr *MockGroupRepositoryMockRecorder) GetMembersID(gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersID", reflect.TypeOf((*MockGroupRepository)(nil).GetMembersID), gid)
}

// Groups mocks base method.
func (m *MockGroupRepository) Groups(limit int, lasttime int64) ([]*model.GroupLastActiveTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Groups", limit, lasttime)
	ret0, _ := ret[0].([]*model.GroupLastActiveTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Groups indicates an expected call of Groups.
func (mr *MockGroupRepositoryMockRecorder) Groups(limit, lasttime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Groups", reflect.TypeOf((*MockGroupRepository)(nil).Groups), limit, lasttime)
}

// HandOverOwner mocks base method.
func (m *MockGroupRepository) HandOverOwner(from, to, gid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandOverOwner", from, to, gid)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandOverOwner indicates an expected call of HandOverOwner.
func (mr *MockGroupRepositoryMockRecorder) HandOverOwner(from, to, gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandOverOwner", reflect.TypeOf((*MockGroupRepository)(nil).HandOverOwner), from, to, gid)
}

// List mocks base method.
func (m *MockGroupRepository) List(uid uint) ([]*model.SummaryGroupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", uid)
	ret0, _ := ret[0].([]*model.SummaryGroupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGroupRepositoryMockRecorder) List(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGroupRepository)(nil).List), uid)
}

// Members mocks base method.
func (m *MockGroupRepository) Members(gid, uid any, limit int) ([]*model.MemberInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Members", gid, uid, limit)
	ret0, _ := ret[0].([]*model.MemberInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Members indicates an expected call of Members.
func (mr *MockGroupRepositoryMockRecorder) Members(gid, uid, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockGroupRepository)(nil).Members), gid, uid, limit)
}

// QueryRole mocks base method.
func (m *MockGroupRepository) QueryRole(gid uint, uid ...uint) ([]*model.GroupMemberRole, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{gid}
	for _, a := range uid {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRole", varargs...)
	ret0, _ := ret[0].([]*model.GroupMemberRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRole indicates an expected call of QueryRole.
func (mr *MockGroupRepositoryMockRecorder) QueryRole(gid interface{}, uid ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{gid}, uid...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRole", reflect.TypeOf((*MockGroupRepository)(nil).QueryRole), varargs...)
}

// ReleaseAnnounce mocks base method.
func (m *MockGroupRepository) ReleaseAnnounce(data *model.GroupAnnouncement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseAnnounce", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseAnnounce indicates an expected call of ReleaseAnnounce.
func (mr *MockGroupRepositoryMockRecorder) ReleaseAnnounce(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseAnnounce", reflect.TypeOf((*MockGroupRepository)(nil).ReleaseAnnounce), data)
}

// SearchByID mocks base method.
func (m *MockGroupRepository) SearchByID(gid uint) (*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByID", gid)
	ret0, _ := ret[0].(*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByID indicates an expected call of SearchByID.
func (mr *MockGroupRepositoryMockRecorder) SearchByID(gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByID", reflect.TypeOf((*MockGroupRepository)(nil).SearchByID), gid)
}

// SearchByName mocks base method.
func (m *MockGroupRepository) SearchByName(name string, cursor *model.Cursor) ([]*model.Group, *model.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", name, cursor)
	ret0, _ := ret[0].([]*model.Group)
	ret1, _ := ret[1].(*model.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockGroupRepositoryMockRecorder) SearchByName(name, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockGroupRepository)(nil).SearchByName), name, cursor)
}

// Update mocks base method.
func (m *MockGroupRepository) Update(from, gid uint, cloumn, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", from, gid, cloumn, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGroupRepositoryMockRecorder) Update(from, gid, cloumn, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGroupRepository)(nil).Update), from, gid, cloumn, value)
}

// UpdateLastTime mocks base method.
func (m *MockGroupRepository) UpdateLastTime(data []*model.GroupLastActiveTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastTime", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastTime indicates an expected call of UpdateLastTime.
func (mr *MockGroupRepositoryMockRecorder) UpdateLastTime(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastTime", reflect.TypeOf((*MockGroupRepository)(nil).UpdateLastTime), data)
}

// UpdateStatus mocks base method.
func (m *MockGroupRepository) UpdateStatus(ctx *model.MemberStatusContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockGroupRepositoryMockRecorder) UpdateStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockGroupRepository)(nil).UpdateStatus), ctx)
}

// ViewAnnounce mocks base method.
func (m *MockGroupRepository) ViewAnnounce(gid, uid any, cursor *model.Cursor) ([]*model.GroupAnnounceInfo, *model.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAnnounce", gid, uid, cursor)
	ret0, _ := ret[0].([]*model.GroupAnnounceInfo)
	ret1, _ := ret[1].(*model.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ViewAnnounce indicates an expected call of ViewAnnounce.
func (mr *MockGroupRepositoryMockRecorder) ViewAnnounce(gid, uid, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAnnounce", reflect.TypeOf((*MockGroupRepository)(nil).ViewAnnounce), gid, uid, cursor)
}
