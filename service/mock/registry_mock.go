// Code generated by MockGen. DO NOT EDIT.
// Source: ./chat/registry/registry.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	config "github.com/farnese17/chat/config"
	storage "github.com/farnese17/chat/pkg/storage"
	repository "github.com/farnese17/chat/repository"
	websocket "github.com/farnese17/chat/websocket"
	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Cache mocks base method.
func (m *MockService) Cache() repository.Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(repository.Cache)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockServiceMockRecorder) Cache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockService)(nil).Cache))
}

// Config mocks base method.
func (m *MockService) Config() config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(config.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockServiceMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockService)(nil).Config))
}

// Friend mocks base method.
func (m *MockService) Friend() repository.FriendRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Friend")
	ret0, _ := ret[0].(repository.FriendRepository)
	return ret0
}

// Friend indicates an expected call of Friend.
func (mr *MockServiceMockRecorder) Friend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Friend", reflect.TypeOf((*MockService)(nil).Friend))
}

// Group mocks base method.
func (m *MockService) Group() repository.GroupRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group")
	ret0, _ := ret[0].(repository.GroupRepository)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockServiceMockRecorder) Group() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockService)(nil).Group))
}

// Hub mocks base method.
func (m *MockService) Hub() websocket.HubInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hub")
	ret0, _ := ret[0].(websocket.HubInterface)
	return ret0
}

// Hub indicates an expected call of Hub.
func (mr *MockServiceMockRecorder) Hub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hub", reflect.TypeOf((*MockService)(nil).Hub))
}

// Logger mocks base method.
func (m *MockService) Logger() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockServiceMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockService)(nil).Logger))
}

// Manager mocks base method.
func (m *MockService) Manager() repository.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manager")
	ret0, _ := ret[0].(repository.Manager)
	return ret0
}

// Manager indicates an expected call of Manager.
func (mr *MockServiceMockRecorder) Manager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manager", reflect.TypeOf((*MockService)(nil).Manager))
}

// SetHub mocks base method.
func (m *MockService) SetHub(hub websocket.HubInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHub", hub)
}

// SetHub indicates an expected call of SetHub.
func (mr *MockServiceMockRecorder) SetHub(hub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHub", reflect.TypeOf((*MockService)(nil).SetHub), hub)
}

// SetRunningAt mocks base method.
func (m *MockService) SetRunningAt(t time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRunningAt", t)
}

// SetRunningAt indicates an expected call of SetRunningAt.
func (mr *MockServiceMockRecorder) SetRunningAt(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunningAt", reflect.TypeOf((*MockService)(nil).SetRunningAt), t)
}

// Shutdown mocks base method.
func (m *MockService) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockServiceMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockService)(nil).Shutdown))
}

// Storage mocks base method.
func (m *MockService) Storage() storage.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage")
	ret0, _ := ret[0].(storage.Storage)
	return ret0
}

// Storage indicates an expected call of Storage.
func (mr *MockServiceMockRecorder) Storage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockService)(nil).Storage))
}

// Uptime mocks base method.
func (m *MockService) Uptime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uptime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Uptime indicates an expected call of Uptime.
func (mr *MockServiceMockRecorder) Uptime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uptime", reflect.TypeOf((*MockService)(nil).Uptime))
}

// User mocks base method.
func (m *MockService) User() repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockServiceMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockService)(nil).User))
}
