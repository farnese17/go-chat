// Code generated by MockGen. DO NOT EDIT.
// Source: ./chat/repository/friend.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/farnese17/chat/service/model"
	gomock "github.com/golang/mock/gomock"
)

// MockFriendRepository is a mock of FriendRepository interface.
type MockFriendRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFriendRepositoryMockRecorder
}

// MockFriendRepositoryMockRecorder is the mock recorder for MockFriendRepository.
type MockFriendRepositoryMockRecorder struct {
	mock *MockFriendRepository
}

// NewMockFriendRepository creates a new mock instance.
func NewMockFriendRepository(ctrl *gomock.Controller) *MockFriendRepository {
	mock := &MockFriendRepository{ctrl: ctrl}
	mock.recorder = &MockFriendRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendRepository) EXPECT() *MockFriendRepositoryMockRecorder {
	return m.recorder
}

// BlockedMeList mocks base method.
func (m *MockFriendRepository) BlockedMeList(id uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockedMeList", id)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockedMeList indicates an expected call of BlockedMeList.
func (mr *MockFriendRepositoryMockRecorder) BlockedMeList(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockedMeList", reflect.TypeOf((*MockFriendRepository)(nil).BlockedMeList), id)
}

// Get mocks base method.
func (m *MockFriendRepository) Get(from, to uint) (*model.Friendinfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", from, to)
	ret0, _ := ret[0].(*model.Friendinfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFriendRepositoryMockRecorder) Get(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFriendRepository)(nil).Get), from, to)
}

// GetUser mocks base method.
func (m *MockFriendRepository) GetUser(id ...uint) ([]*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockFriendRepositoryMockRecorder) GetUser(id ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockFriendRepository)(nil).GetUser), id...)
}

// List mocks base method.
func (m *MockFriendRepository) List(id uint) ([]*model.SummaryFriendInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", id)
	ret0, _ := ret[0].([]*model.SummaryFriendInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFriendRepositoryMockRecorder) List(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFriendRepository)(nil).List), id)
}

// QueryStatus mocks base method.
func (m *MockFriendRepository) QueryStatus(id1, id2 uint) (*model.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStatus", id1, id2)
	ret0, _ := ret[0].(*model.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStatus indicates an expected call of QueryStatus.
func (mr *MockFriendRepositoryMockRecorder) QueryStatus(id1, id2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStatus", reflect.TypeOf((*MockFriendRepository)(nil).QueryStatus), id1, id2)
}

// Search mocks base method.
func (m *MockFriendRepository) Search(id uint, value string, cursor *model.Cursor) (*model.Cursor, []*model.Friendinfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", id, value, cursor)
	ret0, _ := ret[0].(*model.Cursor)
	ret1, _ := ret[1].([]*model.Friendinfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Search indicates an expected call of Search.
func (mr *MockFriendRepositoryMockRecorder) Search(id, value, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockFriendRepository)(nil).Search), id, value, cursor)
}

// UpdateRemarkOrGroup mocks base method.
func (m *MockFriendRepository) UpdateRemarkOrGroup(friend *model.Friend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemarkOrGroup", friend)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemarkOrGroup indicates an expected call of UpdateRemarkOrGroup.
func (mr *MockFriendRepositoryMockRecorder) UpdateRemarkOrGroup(friend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemarkOrGroup", reflect.TypeOf((*MockFriendRepository)(nil).UpdateRemarkOrGroup), friend)
}

// UpdateStatus mocks base method.
func (m *MockFriendRepository) UpdateStatus(friend *model.Friend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", friend)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockFriendRepositoryMockRecorder) UpdateStatus(friend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockFriendRepository)(nil).UpdateStatus), friend)
}
