// Code generated by MockGen. DO NOT EDIT.
// Source: ./chat/repository/user.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/farnese17/chat/service/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(data *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), data)
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockUserRepository) Get(value any, column string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", value, column)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(value, column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), value, column)
}

// GetBanned mocks base method.
func (m *MockUserRepository) GetBanned(cursor *model.Cursor, lasttime int64) ([]*model.BanStatus, *model.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanned", cursor, lasttime)
	ret0, _ := ret[0].([]*model.BanStatus)
	ret1, _ := ret[1].(*model.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBanned indicates an expected call of GetBanned.
func (mr *MockUserRepositoryMockRecorder) GetBanned(cursor, lasttime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanned", reflect.TypeOf((*MockUserRepository)(nil).GetBanned), cursor, lasttime)
}

// Search mocks base method.
func (m *MockUserRepository) Search(value any, column string) (*model.ResponseUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", value, column)
	ret0, _ := ret[0].(*model.ResponseUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockUserRepositoryMockRecorder) Search(value, column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockUserRepository)(nil).Search), value, column)
}

// UpdatePassword mocks base method.
func (m *MockUserRepository) UpdatePassword(id uint, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepositoryMockRecorder) UpdatePassword(id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepository)(nil).UpdatePassword), id, password)
}

// UpdateUserInfo mocks base method.
func (m *MockUserRepository) UpdateUserInfo(id uint, value any, column string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", id, value, column)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockUserRepositoryMockRecorder) UpdateUserInfo(id, value, column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserInfo), id, value, column)
}

// MockTestableRepo is a mock of TestableRepo interface.
type MockTestableRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTestableRepoMockRecorder
}

// MockTestableRepoMockRecorder is the mock recorder for MockTestableRepo.
type MockTestableRepoMockRecorder struct {
	mock *MockTestableRepo
}

// NewMockTestableRepo creates a new mock instance.
func NewMockTestableRepo(ctrl *gomock.Controller) *MockTestableRepo {
	mock := &MockTestableRepo{ctrl: ctrl}
	mock.recorder = &MockTestableRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestableRepo) EXPECT() *MockTestableRepoMockRecorder {
	return m.recorder
}

// ExecSql mocks base method.
func (m *MockTestableRepo) ExecSql(sql string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecSql", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecSql indicates an expected call of ExecSql.
func (mr *MockTestableRepoMockRecorder) ExecSql(sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSql", reflect.TypeOf((*MockTestableRepo)(nil).ExecSql), varargs...)
}
