// Code generated by MockGen. DO NOT EDIT.
// Source: ./chat/repository/cache.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	repository "github.com/farnese17/chat/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *MockCache) AddMember(gid, member uint, role int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMember", gid, member, role)
}

// AddMember indicates an expected call of AddMember.
func (mr *MockCacheMockRecorder) AddMember(gid, member, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockCache)(nil).AddMember), gid, member, role)
}

// AddMemberIfKeyExist mocks base method.
func (m *MockCache) AddMemberIfKeyExist(gid, member uint, role int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberIfKeyExist", gid, member, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemberIfKeyExist indicates an expected call of AddMemberIfKeyExist.
func (mr *MockCacheMockRecorder) AddMemberIfKeyExist(gid, member, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberIfKeyExist", reflect.TypeOf((*MockCache)(nil).AddMemberIfKeyExist), gid, member, role)
}

// BFM mocks base method.
func (m *MockCache) BFM() repository.BloomFilter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFM")
	ret0, _ := ret[0].(repository.BloomFilter)
	return ret0
}

// BFM indicates an expected call of BFM.
func (mr *MockCacheMockRecorder) BFM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFM", reflect.TypeOf((*MockCache)(nil).BFM))
}

// Flush mocks base method.
func (m *MockCache) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockCacheMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockCache)(nil).Flush))
}

// Get mocks base method.
func (m *MockCache) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// GetAdmin mocks base method.
func (m *MockCache) GetAdmin(gid uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", gid)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockCacheMockRecorder) GetAdmin(gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockCache)(nil).GetAdmin), gid)
}

// GetBanned mocks base method.
func (m *MockCache) GetBanned(cursor uint64) (uint64, []uint, []int, []int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanned", cursor)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].([]uint)
	ret2, _ := ret[2].([]int)
	ret3, _ := ret[3].([]int64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetBanned indicates an expected call of GetBanned.
func (mr *MockCacheMockRecorder) GetBanned(cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanned", reflect.TypeOf((*MockCache)(nil).GetBanned), cursor)
}

// GetMembers mocks base method.
func (m *MockCache) GetMembers(gid uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", gid)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockCacheMockRecorder) GetMembers(gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockCache)(nil).GetMembers), gid)
}

// GetMembersAndCache mocks base method.
func (m *MockCache) GetMembersAndCache(gid uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersAndCache", gid)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersAndCache indicates an expected call of GetMembersAndCache.
func (mr *MockCacheMockRecorder) GetMembersAndCache(gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersAndCache", reflect.TypeOf((*MockCache)(nil).GetMembersAndCache), gid)
}

// GetOfflineMessages mocks base method.
func (m *MockCache) GetOfflineMessages(id uint) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfflineMessages", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfflineMessages indicates an expected call of GetOfflineMessages.
func (mr *MockCacheMockRecorder) GetOfflineMessages(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfflineMessages", reflect.TypeOf((*MockCache)(nil).GetOfflineMessages), id)
}

// GetPendingMessages mocks base method.
func (m *MockCache) GetPendingMessages() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingMessages")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingMessages indicates an expected call of GetPendingMessages.
func (mr *MockCacheMockRecorder) GetPendingMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingMessages", reflect.TypeOf((*MockCache)(nil).GetPendingMessages))
}

// GetToken mocks base method.
func (m *MockCache) GetToken(id uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockCacheMockRecorder) GetToken(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockCache)(nil).GetToken), id)
}

// IsBanMuted mocks base method.
func (m *MockCache) IsBanMuted(id uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBanMuted", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBanMuted indicates an expected call of IsBanMuted.
func (mr *MockCacheMockRecorder) IsBanMuted(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBanMuted", reflect.TypeOf((*MockCache)(nil).IsBanMuted), id)
}

// IsBanPermanent mocks base method.
func (m *MockCache) IsBanPermanent(id uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBanPermanent", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBanPermanent indicates an expected call of IsBanPermanent.
func (mr *MockCacheMockRecorder) IsBanPermanent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBanPermanent", reflect.TypeOf((*MockCache)(nil).IsBanPermanent), id)
}

// IsBanned mocks base method.
func (m *MockCache) IsBanned(id uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBanned", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBanned indicates an expected call of IsBanned.
func (mr *MockCacheMockRecorder) IsBanned(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBanned", reflect.TypeOf((*MockCache)(nil).IsBanned), id)
}

// Remove mocks base method.
func (m *MockCache) Remove(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", key)
}

// Remove indicates an expected call of Remove.
func (mr *MockCacheMockRecorder) Remove(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCache)(nil).Remove), key)
}

// RemoveGroupLastActiveTime mocks base method.
func (m *MockCache) RemoveGroupLastActiveTime(gid uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveGroupLastActiveTime", gid)
}

// RemoveGroupLastActiveTime indicates an expected call of RemoveGroupLastActiveTime.
func (mr *MockCacheMockRecorder) RemoveGroupLastActiveTime(gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroupLastActiveTime", reflect.TypeOf((*MockCache)(nil).RemoveGroupLastActiveTime), gid)
}

// RemoveMember mocks base method.
func (m *MockCache) RemoveMember(gid, member uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", gid, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockCacheMockRecorder) RemoveMember(gid, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockCache)(nil).RemoveMember), gid, member)
}

// RemoveOfflineMessage mocks base method.
func (m *MockCache) RemoveOfflineMessage(id uint, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveOfflineMessage", id, message)
}

// RemoveOfflineMessage indicates an expected call of RemoveOfflineMessage.
func (mr *MockCacheMockRecorder) RemoveOfflineMessage(id, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOfflineMessage", reflect.TypeOf((*MockCache)(nil).RemoveOfflineMessage), id, message)
}

// RemovePendingMessage mocks base method.
func (m *MockCache) RemovePendingMessage(msgID string, receiver uint, sign int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePendingMessage", msgID, receiver, sign)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePendingMessage indicates an expected call of RemovePendingMessage.
func (mr *MockCacheMockRecorder) RemovePendingMessage(msgID, receiver, sign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePendingMessage", reflect.TypeOf((*MockCache)(nil).RemovePendingMessage), msgID, receiver, sign)
}

// Set mocks base method.
func (m *MockCache) Set(key string, val any, expire time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, val, expire)
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(key, val, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), key, val, expire)
}

// SetBanned mocks base method.
func (m *MockCache) SetBanned(id string, level int, expire time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBanned", id, level, expire)
}

// SetBanned indicates an expected call of SetBanned.
func (mr *MockCacheMockRecorder) SetBanned(id, level, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBanned", reflect.TypeOf((*MockCache)(nil).SetBanned), id, level, expire)
}

// SetExpiration mocks base method.
func (m *MockCache) SetExpiration(key string, expire time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExpiration", key, expire)
}

// SetExpiration indicates an expected call of SetExpiration.
func (mr *MockCacheMockRecorder) SetExpiration(key, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpiration", reflect.TypeOf((*MockCache)(nil).SetExpiration), key, expire)
}

// SetGroupLastActiveTime mocks base method.
func (m *MockCache) SetGroupLastActiveTime(gid uint, lasttime int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGroupLastActiveTime", gid, lasttime)
}

// SetGroupLastActiveTime indicates an expected call of SetGroupLastActiveTime.
func (mr *MockCacheMockRecorder) SetGroupLastActiveTime(gid, lasttime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupLastActiveTime", reflect.TypeOf((*MockCache)(nil).SetGroupLastActiveTime), gid, lasttime)
}

// SetToken mocks base method.
func (m *MockCache) SetToken(id uint, token string, expire time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToken", id, token, expire)
}

// SetToken indicates an expected call of SetToken.
func (mr *MockCacheMockRecorder) SetToken(id, token, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockCache)(nil).SetToken), id, token, expire)
}

// StartFlush mocks base method.
func (m *MockCache) StartFlush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartFlush")
}

// StartFlush indicates an expected call of StartFlush.
func (mr *MockCacheMockRecorder) StartFlush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFlush", reflect.TypeOf((*MockCache)(nil).StartFlush))
}

// Stop mocks base method.
func (m *MockCache) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockCacheMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCache)(nil).Stop))
}

// StoreOfflineMessage mocks base method.
func (m *MockCache) StoreOfflineMessage(id uint, message any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreOfflineMessage", id, message)
}

// StoreOfflineMessage indicates an expected call of StoreOfflineMessage.
func (mr *MockCacheMockRecorder) StoreOfflineMessage(id, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOfflineMessage", reflect.TypeOf((*MockCache)(nil).StoreOfflineMessage), id, message)
}

// StorePendingMessage mocks base method.
func (m *MockCache) StorePendingMessage(message any, sign int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StorePendingMessage", message, sign)
}

// StorePendingMessage indicates an expected call of StorePendingMessage.
func (mr *MockCacheMockRecorder) StorePendingMessage(message, sign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePendingMessage", reflect.TypeOf((*MockCache)(nil).StorePendingMessage), message, sign)
}

// MockBloomFilter is a mock of BloomFilter interface.
type MockBloomFilter struct {
	ctrl     *gomock.Controller
	recorder *MockBloomFilterMockRecorder
}

// MockBloomFilterMockRecorder is the mock recorder for MockBloomFilter.
type MockBloomFilterMockRecorder struct {
	mock *MockBloomFilter
}

// NewMockBloomFilter creates a new mock instance.
func NewMockBloomFilter(ctrl *gomock.Controller) *MockBloomFilter {
	mock := &MockBloomFilter{ctrl: ctrl}
	mock.recorder = &MockBloomFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBloomFilter) EXPECT() *MockBloomFilterMockRecorder {
	return m.recorder
}

// AddMute mocks base method.
func (m *MockBloomFilter) AddMute(id uint, expireAt int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMute", id, expireAt)
}

// AddMute indicates an expected call of AddMute.
func (mr *MockBloomFilterMockRecorder) AddMute(id, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMute", reflect.TypeOf((*MockBloomFilter)(nil).AddMute), id, expireAt)
}

// BanUser mocks base method.
func (m *MockBloomFilter) BanUser(id uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BanUser", id)
}

// BanUser indicates an expected call of BanUser.
func (mr *MockBloomFilterMockRecorder) BanUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanUser", reflect.TypeOf((*MockBloomFilter)(nil).BanUser), id)
}

// IsBanned mocks base method.
func (m *MockBloomFilter) IsBanned(id uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBanned", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBanned indicates an expected call of IsBanned.
func (mr *MockBloomFilterMockRecorder) IsBanned(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBanned", reflect.TypeOf((*MockBloomFilter)(nil).IsBanned), id)
}

// IsMuted mocks base method.
func (m *MockBloomFilter) IsMuted(id uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMuted", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMuted indicates an expected call of IsMuted.
func (mr *MockBloomFilterMockRecorder) IsMuted(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMuted", reflect.TypeOf((*MockBloomFilter)(nil).IsMuted), id)
}

// Start mocks base method.
func (m *MockBloomFilter) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockBloomFilterMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBloomFilter)(nil).Start))
}

// Stop mocks base method.
func (m *MockBloomFilter) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockBloomFilterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBloomFilter)(nil).Stop))
}

// UnbanUser mocks base method.
func (m *MockBloomFilter) UnbanUser(id uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnbanUser", id)
}

// UnbanUser indicates an expected call of UnbanUser.
func (mr *MockBloomFilterMockRecorder) UnbanUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbanUser", reflect.TypeOf((*MockBloomFilter)(nil).UnbanUser), id)
}

// MockTestableCache is a mock of TestableCache interface.
type MockTestableCache struct {
	ctrl     *gomock.Controller
	recorder *MockTestableCacheMockRecorder
}

// MockTestableCacheMockRecorder is the mock recorder for MockTestableCache.
type MockTestableCacheMockRecorder struct {
	mock *MockTestableCache
}

// NewMockTestableCache creates a new mock instance.
func NewMockTestableCache(ctrl *gomock.Controller) *MockTestableCache {
	mock := &MockTestableCache{ctrl: ctrl}
	mock.recorder = &MockTestableCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestableCache) EXPECT() *MockTestableCacheMockRecorder {
	return m.recorder
}

// Clearup mocks base method.
func (m *MockTestableCache) Clearup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clearup")
}

// Clearup indicates an expected call of Clearup.
func (mr *MockTestableCacheMockRecorder) Clearup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clearup", reflect.TypeOf((*MockTestableCache)(nil).Clearup))
}

// CountSet mocks base method.
func (m *MockTestableCache) CountSet(key string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSet", key)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CountSet indicates an expected call of CountSet.
func (mr *MockTestableCacheMockRecorder) CountSet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSet", reflect.TypeOf((*MockTestableCache)(nil).CountSet), key)
}

// GetGroupsOrMembers mocks base method.
func (m *MockTestableCache) GetGroupsOrMembers(key string) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsOrMembers", key)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsOrMembers indicates an expected call of GetGroupsOrMembers.
func (mr *MockTestableCacheMockRecorder) GetGroupsOrMembers(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsOrMembers", reflect.TypeOf((*MockTestableCache)(nil).GetGroupsOrMembers), key)
}

// ScanKeys mocks base method.
func (m *MockTestableCache) ScanKeys(key string, count int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanKeys", key, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanKeys indicates an expected call of ScanKeys.
func (mr *MockTestableCacheMockRecorder) ScanKeys(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanKeys", reflect.TypeOf((*MockTestableCache)(nil).ScanKeys), key, count)
}
